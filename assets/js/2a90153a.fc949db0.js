"use strict";(self.webpackChunkworkflows_docs=self.webpackChunkworkflows_docs||[]).push([[73],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>d});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(o),f=r,d=c["".concat(l,".").concat(f)]||c[f]||m[f]||i;return o?n.createElement(d,s(s({ref:t},u),{},{components:o})):n.createElement(d,s({ref:t},u))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,s=new Array(i);s[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[c]="string"==typeof e?e:r,s[1]=a;for(var p=2;p<i;p++)s[p]=o[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}f.displayName="MDXCreateElement"},7493:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=o(7462),r=(o(7294),o(3905));const i={sidebar_position:8},s="Semantic Pull Request",a={unversionedId:"workflows/semantic_pull_request",id:"workflows/semantic_pull_request",title:"Semantic Pull Request",description:"At VGV, we use conventional commits. This way, our commit history is clean and useful when we squash and merge \u2014 we can easily see the type and brief description of each PR. Note that this workflow can be customized to reflect the pull request types you want to enforce (e.g. feat, fix, docs, chore).",source:"@site/docs/workflows/semantic_pull_request.md",sourceDirName:"workflows",slug:"/workflows/semantic_pull_request",permalink:"/docs/workflows/semantic_pull_request",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/very_good_workflows/tree/main/site/docs/workflows/semantic_pull_request.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Pana",permalink:"/docs/workflows/pana"},next:{title:"Spell Check",permalink:"/docs/workflows/spell_check"}},l={},p=[{value:"Steps",id:"steps",level:2},{value:"Inputs",id:"inputs",level:2},{value:"<code>types</code>",id:"types",level:3},{value:"<code>scopes</code>",id:"scopes",level:3},{value:"GitHub Repository Configuration",id:"github-repository-configuration",level:2},{value:"Squash Merging",id:"squash-merging",level:3},{value:"GitHub Permissions",id:"github-permissions",level:3},{value:"Example Usage",id:"example-usage",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"semantic-pull-request"},"Semantic Pull Request"),(0,r.kt)("p",null,"At VGV, we use ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"conventional commits"),". This way, our commit history is clean and useful when we squash and merge \u2014 we can easily see the type and brief description of each PR. Note that this workflow can be customized to reflect the pull request types you want to enforce (e.g. feat, fix, docs, chore)."),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("p",null,"The semantic pull request package workflow consists of the following step:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Ensure commit is semantic")),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("h3",{id:"types"},(0,r.kt)("inlineCode",{parentName:"h3"},"types")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," Configure which types are allowed (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'"feat, fix, docs"'),")."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": If not set, then the action uses the list of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/commitizen/conventional-commit-types"},"Commitizen conventional commit types"),"."),(0,r.kt)("h3",{id:"scopes"},(0,r.kt)("inlineCode",{parentName:"h3"},"scopes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," Configure which scopes are allowed (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'"dart_package, flutter_package"'),")."),(0,r.kt)("h2",{id:"github-repository-configuration"},"GitHub Repository Configuration"),(0,r.kt)("h3",{id:"squash-merging"},"Squash Merging"),(0,r.kt)("p",null,"To verify that this workflow will properly evaluate your pull request messages, we recommend configuring your GitHub repository to ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests"},"allow squash merging")," and setting the ",(0,r.kt)("a",{parentName:"p",href:"https://github.blog/changelog/2022-08-23-new-options-for-controlling-the-default-commit-message-when-merging-a-pull-request/"},"default commit message"),' to "Pull request title."'),(0,r.kt)("h3",{id:"github-permissions"},"GitHub Permissions"),(0,r.kt)("p",null,"When running this workflow, the ",(0,r.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN")," has to have the correct permissions to run successfully. On public repositories, the default settings grant the token enough permissions to run correctly. However, on private repositories, settings have to be updated. There are two ways of doing so:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Repository wide update.")," Inside your repository, go to ",(0,r.kt)("em",{parentName:"p"},"Settings > Actions > General"),", scroll down to the ",(0,r.kt)("em",{parentName:"p"},"Workflow permissions")," section and update it to allow ",(0,r.kt)("em",{parentName:"p"},"Read and write permissions"),". Don't forget to save the changes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Workflow specific update.")," In your workflow ",(0,r.kt)("inlineCode",{parentName:"p"},"yaml")," file, you can modify the permissions for the ",(0,r.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN"),". For this workflow to work you have to enable write permissions for pull requests in your job as follows."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  build:\n    permissions:\n      pull-requests: write\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n")),(0,r.kt)("p",{parentName:"li"},"You can read more about this in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token"},"github documentation"),"."))),(0,r.kt)("h2",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: My Workflow\n\non: pull_request\n\njobs:\n  build:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1\n")))}m.isMDXComponent=!0}}]);