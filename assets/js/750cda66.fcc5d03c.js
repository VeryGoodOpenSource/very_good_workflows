"use strict";(self.webpackChunkworkflows_docs=self.webpackChunkworkflows_docs||[]).push([[149],{8577:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});var s=o(4848),l=o(8453);const i={sidebar_position:9},r="Spell Check",t={id:"workflows/spell_check",title:"Spell Check",description:"We use cspell for basic spell check on our projects.",source:"@site/docs/workflows/spell_check.md",sourceDirName:"workflows",slug:"/workflows/spell_check",permalink:"/docs/workflows/spell_check",draft:!1,unlisted:!1,editUrl:"https://github.com/VeryGoodOpenSource/very_good_workflows/tree/main/site/docs/workflows/spell_check.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Semantic Pull Request",permalink:"/docs/workflows/semantic_pull_request"}},c={},d=[{value:"Steps",id:"steps",level:2},{value:"Inputs",id:"inputs",level:2},{value:"<code>config</code>",id:"config",level:3},{value:"<code>includes</code>",id:"includes",level:3},{value:"<code>working_directory</code>",id:"working_directory",level:3},{value:"<code>runs_on</code>",id:"runs_on",level:3},{value:"<code>verbose</code>",id:"verbose",level:3},{value:"<code>modified_files_only</code>",id:"modified_files_only",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"CSpell File Example",id:"cspell-file-example",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"spell-check",children:"Spell Check"})}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.a,{href:"https://github.com/streetsidesoftware/cspell",children:"cspell"})," for basic spell check on our projects."]}),"\n",(0,s.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,s.jsx)(n.p,{children:"The spell check workflow consists of the following steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Git checkout"}),"\n",(0,s.jsx)(n.li,{children:"Run spell check"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"inputs",children:"Inputs"}),"\n",(0,s.jsx)(n.h3,{id:"config",children:(0,s.jsx)(n.code,{children:"config"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," The location of the ",(0,s.jsx)(n.code,{children:"cspell.json"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:'".github/cspell.json"'})]}),"\n",(0,s.jsx)(n.h3,{id:"includes",children:(0,s.jsx)(n.code,{children:"includes"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," The glob patterns to filter the files to be checked. Use a new line between patterns to define multiple patterns."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:'""'})]}),"\n",(0,s.jsx)(n.h3,{id:"working_directory",children:(0,s.jsx)(n.code,{children:"working_directory"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," The path to the root of the Dart package."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:'"."'})]}),"\n",(0,s.jsx)(n.h3,{id:"runs_on",children:(0,s.jsx)(n.code,{children:"runs_on"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," An optional operating system on which to run the workflow."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:'"ubuntu-latest"'})]}),"\n",(0,s.jsx)(n.h3,{id:"verbose",children:(0,s.jsx)(n.code,{children:"verbose"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," An optional boolean which determines whether to log verbose output."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:"false"})]}),"\n",(0,s.jsx)(n.h3,{id:"modified_files_only",children:(0,s.jsx)(n.code,{children:"modified_files_only"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optional"})," An optional boolean which determines whether spell check is run on modified files."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Default"})," ",(0,s.jsx)(n.code,{children:"true"})]}),"\n",(0,s.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: My Workflow\n\non: pull_request\n\njobs:\n  build:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/spell_check.yml@v1\n    with:\n      includes: |\n        **/*.{dart,md,yaml}\n        !.dart_tool/**/*.{dart,yaml}\n        .*/**/*.yml\n      runs_on: macos-latest\n      modified_files_only: false\n      working_directory: examples/my_project\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cspell-file-example",children:"CSpell File Example"}),"\n",(0,s.jsxs)(n.p,{children:["More information can be found in ",(0,s.jsx)(n.a,{href:"https://cspell.org/configuration/",children:"cspell docs"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Our custom dictionaries are available ",(0,s.jsx)(n.a,{href:"https://github.com/verygoodopensource/very_good_dictionaries/",children:"here"})," for everyone to use."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",\n  "version": "0.2",\n  // List of the names of the dictionaries to use.\n  "dictionaries": ["vgv_allowed", "vgv_forbidden"],\n  // List of custom dictionary definitions.\n  "dictionaryDefinitions": [\n    // Remote dictionary example. URLs will be retrieved via HTTP GET.\n    {\n      "name": "vgv_allowed",\n      "path": "https://raw.githubusercontent.com/verygoodopensource/very_good_dictionaries/main/allowed.txt",\n      "description": "Allowed VGV Spellings"\n    },\n    // Local dictionary example. Relative paths are relative to the config file.\n    {\n      "name": "vgv_forbidden",\n      "path": "./vgv_forbidden.txt",\n      "addWords": true\n    }\n  ],\n  // Ignores files found in .gitignore.\n  "useGitignore": true,\n  // List of allowed words that are not part of dictionaries.\n  "words": ["Contador", "localizable", "mostrado", "p\xe1gina", "Texto"],\n  // List of not-allowed words.\n  // For example "hte" should be "the".\n  "flagWords": ["hte"]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>t});var s=o(6540);const l={},i=s.createContext(l);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);