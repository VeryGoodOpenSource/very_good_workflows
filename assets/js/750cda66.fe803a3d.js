"use strict";(self.webpackChunkworkflows_docs=self.webpackChunkworkflows_docs||[]).push([[965],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||l;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,a=new Array(l);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const l={sidebar_position:7},a="Spell Check",i={unversionedId:"workflows/spell_check",id:"workflows/spell_check",title:"Spell Check",description:"We use cspell for basic spell check on our projects.",source:"@site/docs/workflows/spell_check.md",sourceDirName:"workflows",slug:"/workflows/spell_check",permalink:"/docs/workflows/spell_check",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/very_good_workflows/tree/main/site/docs/workflows/spell_check.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Pana",permalink:"/docs/workflows/pana"},next:{title:"Semantic Pull Request",permalink:"/docs/workflows/semantic_pull_request"}},s={},p=[{value:"Steps",id:"steps",level:2},{value:"Inputs",id:"inputs",level:2},{value:"<code>config</code>",id:"config",level:3},{value:"<code>includes</code>",id:"includes",level:3},{value:"<code>working_directory</code>",id:"working_directory",level:3},{value:"<code>runs_on</code>",id:"runs_on",level:3},{value:"<code>verbose</code>",id:"verbose",level:3},{value:"<code>modified_files_only</code>",id:"modified_files_only",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"CSpell File Example",id:"cspell-file-example",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spell-check"},"Spell Check"),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/streetsidesoftware/cspell"},"cspell")," for basic spell check on our projects."),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("p",null,"The spell check workflow consists of the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Git checkout"),(0,r.kt)("li",{parentName:"ol"},"Run spell check")),(0,r.kt)("h2",{id:"inputs"},"Inputs"),(0,r.kt)("h3",{id:"config"},(0,r.kt)("inlineCode",{parentName:"h3"},"config")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," The location of the ",(0,r.kt)("inlineCode",{parentName:"p"},"cspell.json"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},'".github/cspell.json"')),(0,r.kt)("h3",{id:"includes"},(0,r.kt)("inlineCode",{parentName:"h3"},"includes")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," The glob patterns to filter the files to be checked. Use a new line between patterns to define multiple patterns."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},'""')),(0,r.kt)("h3",{id:"working_directory"},(0,r.kt)("inlineCode",{parentName:"h3"},"working_directory")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," The path to the root of the Dart package."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},'"."')),(0,r.kt)("h3",{id:"runs_on"},(0,r.kt)("inlineCode",{parentName:"h3"},"runs_on")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," An optional operating system on which to run the workflow."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},'"ubuntu-latest"')),(0,r.kt)("h3",{id:"verbose"},(0,r.kt)("inlineCode",{parentName:"h3"},"verbose")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," An optional boolean which determines whether to log verbose output."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("h3",{id:"modified_files_only"},(0,r.kt)("inlineCode",{parentName:"h3"},"modified_files_only")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Optional")," An optional boolean which determines whether spell check is run on modified files."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Default")," ",(0,r.kt)("inlineCode",{parentName:"p"},"true")),(0,r.kt)("h2",{id:"example-usage"},"Example Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name: My Workflow\n\non: pull_request\n\njobs:\n  build:\n    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/spell_check.yml@v1\n    with:\n      includes: |\n        **/*.{dart,md,yaml}\n        !.dart_tool/**/*.{dart,yaml}\n        .*/**/*.yml\n      runs_on: macos-latest\n      modified_files_only: false\n      working_directory: examples/my_project\n")),(0,r.kt)("h2",{id:"cspell-file-example"},"CSpell File Example"),(0,r.kt)("p",null,"More information can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://cspell.org/configuration/"},"cspell docs"),"."),(0,r.kt)("p",null,"Our custom dictionaries are available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/verygoodopensource/very_good_dictionaries/"},"here")," for everyone to use."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "https://raw.githubusercontent.com/streetsidesoftware/cspell/main/cspell.schema.json",\n  "version": "0.2",\n  // List of the names of the dictionaries to use.\n  "dictionaries": ["vgv_allowed", "vgv_forbidden"],\n  // List of custom dictionary definitions.\n  "dictionaryDefinitions": [\n    // Remote dictionary example. URLs will be retrieved via HTTP GET.\n    {\n      "name": "vgv_allowed",\n      "path": "https://raw.githubusercontent.com/verygoodopensource/very_good_dictionaries/main/allowed.txt",\n      "description": "Allowed VGV Spellings"\n    },\n    // Local dictionary example. Relative paths are relative to the config file.\n    {\n      "name": "vgv_forbidden",\n      "path": "./vgv_forbidden.txt",\n      "addWords": true\n    }\n  ],\n  // Ignores files found in .gitignore.\n  "useGitignore": true,\n  // List of allowed words that are not part of dictionaries.\n  "words": ["Contador", "localizable", "mostrado", "p\xe1gina", "Texto"],\n  // List of not-allowed words.\n  // For example "hte" should be "the".\n  "flagWords": ["hte"]\n}\n')))}u.isMDXComponent=!0}}]);